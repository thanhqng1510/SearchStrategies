from maze import Mazedef PrintResult(file, res_tup):    '''    res_tup consist of (path, explored_list, time_to_escape)    '''        path, explored_list, time_to_escape = res_tup        if path:        file.write('Path: ' + str(path) + '\n\n')        file.write('Path cost: ' + str(len(path)) + '\n\n')            file.write('Explored list: ' + str(explored_list) + '\n\n')    len_explored_list = len(explored_list)    if isinstance(explored_list[0], list):        len_explored_list = sum(len(i) for i in explored_list)    file.write('Length of explored list: ' + str(len_explored_list) + '\n\n')    file.write('Time to escape: ' + str(time_to_escape) + '\n')maze, goal_node = Maze.fromTestFile('../inp/test8x_1.txt')file_out = open('../out/output.txt', 'w')file_out.write('---------- Breadth First Search ----------\n')PrintResult(file_out, maze.breadthFirstSearch(0, goal_node))file_out.write('--------------------\n\n')file_out.write('---------- Uniform - Cost Search ----------\n')PrintResult(file_out, maze.uniformCostSearch(0, goal_node))file_out.write('--------------------\n\n')file_out.write('---------- Iterative Deepening Search ----------\n')PrintResult(file_out, maze.iterativeDeepeningSearch(0, goal_node))file_out.write('--------------------\n\n')file_out.write('---------- Greedy Best - First Search ----------\n')PrintResult(file_out, maze.greedyBestFirstSearch(0, goal_node))file_out.write('--------------------\n\n')file_out.write('---------- A Star Search ----------\n')PrintResult(file_out, maze.aStarSearch(0, goal_node))file_out.write('--------------------\n\n')file_out.close()